/**
 * A collection of tasks for setting up the project's tools, such as apache httpd, tomcat,
 * and the gradlewrapper 
 */

description = "Tasks for setting up the project's tools such ash apache httpd, tomcat and gradlew"

def tomcatBaseName = 'apache-tomcat-' + tomcatVersion;
def tomcatZipFile = tomcatBaseName + '.zip';
def tomcatZipFileLocation = project.buildDir.toString() + '/tmp/' + tomcatZipFile;
def tomcatDownloadUrl = artifactoryRoot + '/tools/apache-tomcat/' + tomcatZipFile;

/**
 * Downloads a copy of tomcat from the local repository if it hasn't already been downloaded
 */
task downloadTomcat {
    outputs.file file(tomcatZipFileLocation); 
    doLast {
        file(project.buildDir.toString() + '/tmp/').mkdirs();
        ant.get(src: tomcatDownloadUrl, dest: tomcatZipFileLocation, verbose: true);
    }
}

/**
 * Expand the downloaded archive if it hasn't already been expanded
 */
task explodeTomcatServer(dependsOn: downloadTomcat) {
    inputs.file file(tomcatZipFileLocation); 
    outputs.dir file(tomcatBaseName); 
    doLast {
        copy {
            from zipTree(tomcatZipFileLocation);
            into project.projectDir;
            include tomcatBaseName + '/bin/**';
            include tomcatBaseName + '/conf/**';
            include tomcatBaseName + '/lib/**';
            include tomcatBaseName + '/webapps/**';
            include tomcatBaseName + '/work/**';
        }
        // make sure that the shell scripts are set +x on linux / macs
        if (System.getProperty("os.name").toLowerCase().indexOf("win") < 0) {
            FileTree tree = fileTree(tomcatBaseName + '/bin').include('**/*.sh');
            tree.each { File file ->
                logger.info('Setting +x permission on ' + file);
                file.setExecutable(true);
            }
        }
    }
}

def grailsBaseName = 'grails-' + grailsVersion;
def grailsZipFile = grailsBaseName + '.zip';
def grailsZipFileLocation = project.buildDir.toString() + '/tmp/' + grailsZipFile;
def grailsDownloadUrl = artifactoryRoot + '/tools/grails/' + grailsZipFile;

/**
 * Downloads a copy of grails from the local repository if it hasn't already been downloaded
 */
task downloadGrails {
	outputs.file file(grailsZipFileLocation);
	doLast {
		file(project.buildDir.toString() + '/tmp/').mkdirs();
		ant.get(src: grailsDownloadUrl, dest: grailsZipFileLocation, verbose: true);
	}
}

/**
 * Expand the downloaded archive if it hasn't already been expanded
 */
task explodeGrailsZip(dependsOn: downloadGrails) {
	inputs.file file(grailsZipFileLocation);
	outputs.dir file(grailsBaseName);
	doLast {
		copy {
			from zipTree(grailsZipFileLocation);
			into project.projectDir;
		}
		// make sure that everything but the .bat files are set +x on linux / macs
		if (System.getProperty("os.name").toLowerCase().indexOf("win") < 0) {
			FileTree tree = fileTree(grailsBaseName + '/bin').exclude('**/*.bat');
			tree.each { File file ->
				logger.info('Setting +x permission on ' + file);
				file.setExecutable(true);
			}
		}
	}
}


task setupHttpd(dependsOn: 'makeInstallHttpd') << {
    description = 'Sets up the Apache ' + httpdVersion + ' server';
    logger.info('Apache ' + httpdVersion + ' was installed under ' + rootProject.rootDir + httpdPath);
}

task makeInstallHttpd(type: Exec, dependsOn: 'makeHttpd') {
    workingDir httpdVersion;
    executable 'make';
    args 'install';
}

task makeHttpd(type: Exec, dependsOn: 'configureHttpdInstaller') {
    workingDir httpdVersion;
    executable 'make';
}

task configureHttpdInstaller(type: Exec, dependsOn: 'extractHttpdInstaller') {
    workingDir httpdVersion;
    executable './configure';
    args '--prefix=' + rootProject.rootDir + httpdPath;
}

task extractHttpdInstaller(type: Exec, dependsOn: ['cleanHttpdInstaller', 'downloadHttpd']) {
    executable '/bin/tar';
    args '-xzvf', httpdVersion + '.tar.gz';
}

task downloadHttpd << {
    def fileName = httpdVersion + '.tar.gz';
    ant.get(src: 'http://mirror.olnevhost.net/pub/apache//httpd/' + fileName,
            dest: fileName, verbose: true);
}

task cleanHttpdInstaller(type: Delete) {
    delete httpdVersion;
}

