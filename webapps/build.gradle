/**
 * Default settings for all webapps
 */
description = "This project contains the defaults for all webapps";

subprojects {
    
    apply plugin: 'war';
    apply plugin: 'maven';
    apply plugin: 'eclipse-wtp';
    apply plugin: 'project-report';
    
    /**
    * Import the cargo and cobertura plug-in definitions
    */
   buildscript {
       apply from: rootDir.path + '/cargo.gradle';
       apply from: rootDir.path + '/cobertura.gradle';
   }
   
    sourceCompatibility = 1.6;
    targetCompatibility = 1.6;
    
    dependencies {
        
        providedCompile 'javax.servlet:servlet-api:2.5';
        //providedCompile 'javax:javaee-web-api:6.0'; TODO: figure out servlet-api 3.0
        providedRuntime 'org.eclipse.jetty.aggregate:jetty-server:8.1.2.v20120308';
        
        testCompile 'junit:junit:4.+';
        
        def cargoVersion = '1.1.1';
        cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
              "org.codehaus.cargo:cargo-ant:$cargoVersion",
              'jaxen:jaxen:1.1.1';
    }

    test {
        forkEvery = 10;
        maxParallelForks = 4;
    }

    /**
     * see the ~/.gradle/gradle.properties for more details on the credentials
     **/
    uploadArchives {
        if (rootProject.hasProperty('artifactory_username') && rootProject.hasProperty('artifactory_password')) {
            repositories.mavenDeployer {
                // depending on the buildStage property we may either want to deploy to the snapshot repo
                if (rootProject.hasProperty('environment') && environment == 'release') {
                    name = 'releaseDeployer';
                    repository(url: "${repositoryGradleLocalUrl}") {
                        authentication(userName: "${artifactory_username}", password: "${artifactory_password}");
                    }
                // or deploy to the release repo
                } else {
                    name = 'snapshotDeployer';
                    repository(url: "${snapshotRepoUrl}") {
                        authentication(userName: "${artifactory_username}", password: "${artifactory_password}");
                    }
                }
            }
        }
    }
    uploadArchives.dependsOn(build);
    
    /**
     * initialize the project by creating it's the source, resources and webapp folders
     */
    task initProject << {
        sourceSets.all*.java.srcDirs*.each { it.mkdirs() }
        sourceSets.all*.resources.srcDirs*.each { it.mkdirs() }
        file(webAppDirName).mkdirs();
    }
}
